- name: Set-up the CloudCities VPS
  hosts: cloudcities
  become: true

  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: latest
      loop:
        - nginx
        - certbot
        - python3-certbot-nginx

    - name: Configure CloudCities HTTP
      block:
        - name: Copy HTTP configuration file
          ansible.builtin.copy:
            src: nginx/sites-available/cloudcities-app-http
            dest: /etc/nginx/sites-available/
            mode: 0644
        - name: Enable HTTP configuration file
          ansible.builtin.file:
            src: ../sites-available/cloudcities-app-http
            dest: /etc/nginx/sites-enabled/cloudcities-app-http
            state: link
        - name: Disable the default nginx configuration file
          ansible.builtin.file:
            path: /etc/nginx/sites-enabled/default
            state: absent
        - name: Create .well-known/acme-challenge directory
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: 0755
            owner: root
            group: root
          loop:
            - /var/www/.well-known
            - /var/www/.well-known/acme-challenge


    # TODO: Configure CloudCities HTTPS


    - name: Enable nginx and ensure it is started
      ansible.builtin.service:
        name: nginx
        enabled: true
        state: restarted



    - name: Set-up the CloudCities App
      vars:
        app_repo: https://github.com/sperrhaken/cloudcities.git
        app_version: commit-the-rest
        app_user: cloudcities-app
      block:
        - name: Create a user for the CloudCities app
          ansible.builtin.user:
            name: "{{ app_user }}"
            system: true
            password_lock: true
            shell: /usr/bin/bash
        - name: Install packages for the CloudCities app
          ansible.builtin.apt:
            name: "{{ item }}"
            state: latest
          loop:
            - npm
            # needed for ansible to become a non-privileged user if the
            # connection was made with a user that is also non-privileged
            # (i.e. not root)
            - acl
        - name: Block to run as app_user
          become_user: "{{ app_user }}"
          become: true
          block:
            - name: Pull CloudCities app
              ansible.builtin.git:
                repo: "{{ app_repo }}"
                dest: "/home/{{ app_user }}/app"
                version: "{{ app_version }}"
            - name: Build CloudCities app
              ansible.builtin.command:
                cmd: npm ci
                chdir: "/home/{{ app_user }}/app"


    - name: Firewall rules
      block:
        - name: "Firewall: Allow related/established"
          ansible.builtin.iptables:
            ip_version: both
            chain: INPUT
            ctstate:
              - RELATED
              - ESTABLISHED
            jump: ACCEPT
        - name: "Firewall: Allow all on localhost"
          ansible.builtin.iptables:
            ip_version: both
            chain: INPUT
            in_interface: lo
            jump: ACCEPT
        - name: "Firewall: Open ports"
          ansible.builtin.iptables:
            ip_version: both
            chain: INPUT
            protocol: tcp
            destination_port: "{{ item }}"
            jump: ACCEPT
          loop:
            - 22
            - 80
            - 443
        - name: "Firewall: INPUT policy DROP"
          ansible.builtin.iptables:
            ip_version: both
            chain: INPUT
            policy: DROP

    - name: "Firewall: Make iptables rules persistent"
      block:
        - name: "Firewall: Install iptables-persistent"
          ansible.builtin.apt:
            name: iptables-persistent
            state: latest
        - name: "Firewall: Save iptables rule persistently"
          ansible.builtin.command:
            cmd: netfilter-persistent save
        - name: "Firewall: Ensure netfilter-persistent.service is enabled"
          ansible.builtin.service:
            name: netfilter-persistent
            enabled: true
